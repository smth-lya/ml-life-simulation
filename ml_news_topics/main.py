from config.paths import RAW_DATA_PATH, PROCESSED_DATA_PATH
from utils.data_loader import load_articles
from utils.text_processor import process_text, split_data
from utils.vocabulary import build_vocab, save_vocab
from tqdm import tqdm
from colorama import init, Fore, Style
from NaiveBayesClassifier import NaiveBayesClassifier
import time
import json

init(autoreset=True)


def print_header():
    print(Fore.CYAN + "=" * 50)
    print(Fore.YELLOW + "üöÄ –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–û–°–¢–ù–´–• –°–¢–ê–¢–ï–ô".center(50))
    print(Fore.CYAN + "=" * 50 + Style.RESET_ALL)


def print_step(step, description):
    print(Fore.GREEN + f"\n[{step}] {description}" + Style.RESET_ALL)
    time.sleep(0.3)


def main():
    print_header()

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π
    print_step("1", "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π...")
    articles = load_articles(RAW_DATA_PATH)
    print(Fore.LIGHTBLUE_EX + f"‚úî –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π" + Style.RESET_ALL)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    if PROCESSED_DATA_PATH.exists():
        print_step("2", "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è...")
        with open(PROCESSED_DATA_PATH, 'r') as f:
            vocab = json.load(f)
        print(Fore.LIGHTBLUE_EX + f"‚úî –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ª–æ–≤–∞—Ä—å ({len(vocab)} —Ç–æ–∫–µ–Ω–æ–≤)" + Style.RESET_ALL)
    else:
        print_step("2", "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è...")
        all_tokens = []
        for article in tqdm(articles, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞", unit="—Å—Ç–∞—Ç—å—è", colour='green'):
            tokens = process_text(article.get("headline", ""))
            all_tokens.extend(tokens)

        vocab = build_vocab(all_tokens)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        with open(PROCESSED_DATA_PATH, 'w') as f:
            json.dump(vocab, f)
        print(Fore.LIGHTBLUE_EX + f"‚úî –°–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å ({len(vocab)} —Ç–æ–∫–µ–Ω–æ–≤)" + Style.RESET_ALL)

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print_step("3", "–û–±—É—á–µ–Ω–∏–µ –Ω–∞–∏–≤–Ω–æ–≥–æ –ë–∞–π–µ—Å–∞...")
    classifier = NaiveBayesClassifier(vocab)
    classifier.train(articles)

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    test_text = "Cleaner Was Dead In Belk Bathroom For 4 Days Before Body Found"
    predicted_category = classifier.predict(test_text)

    print(Fore.CYAN + "\n" + "=" * 50)
    print(Fore.YELLOW + f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {predicted_category}".center(50))
    print(Fore.CYAN + "=" * 50 + Style.RESET_ALL)


if __name__ == '__main__':
    main()